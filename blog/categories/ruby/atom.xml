<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | RJ's Notes]]></title>
  <link href="http://rurounijones.github.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://rurounijones.github.com/"/>
  <updated>2013-03-07T00:25:02+09:00</updated>
  <id>http://rurounijones.github.com/</id>
  <author>
    <name><![CDATA[RurouniJones]]></name>
    <email><![CDATA[jeff@jones.be]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Resources for Ruby Developers]]></title>
    <link href="http://rurounijones.github.com/blog/2013/03/04/resources-for-ruby-developers/"/>
    <updated>2013-03-04T12:40:00+09:00</updated>
    <id>http://rurounijones.github.com/blog/2013/03/04/resources-for-ruby-developers</id>
    <content type="html"><![CDATA[<p>As someone (Probably a really famous guy whose name I cannot remember) once said
becoming a software developer means having to learn new things for the rest of
your life.</p>

<p>This is just as true for Ruby as for any other language so here are the
resources I like to use to keep up to date.</p>

<p>These are besides things like API sites and the ruby on rails guides etc.</p>

<!--more-->


<h2><a href="http://railscasts.com">Railscasts</a></h2>

<p>Made by Ryan Biggs, Railscasts is a great site with webcasts exploring new and
interesting things happening in the ruby world. As the name suggests it is more
focused on Web Development and Ruby on Rails but it also explores technology
that can be useful to other types of ruby developers.</p>

<p>There are free and paid-for episodes available (for US$9 per month) and every
episode has source code avilable on github. Most episodes also have full
transcripts, including code, which can be read if you are not a video-watching
type.</p>

<h2><a href="http://confreaks.com">Confreaks</a></h2>

<p>If you do not have money to travel the world attending conferences and your
company does not stump up the cash then Confreaks is a gem of a site. They
record presentations at a lot of major development conferences.</p>

<p>Confreaks is very popular with ruby conferences so you can find a wealth of
interesting talks there. (Most of the talks are about 40-60 minutes long
which is perferct for filling up a lunch break while eating or watching on the
daily commute)</p>

<h2><a href="http://news.ycombinator.com">Hacker News</a></h2>

<p>Hacker News is a (mostly) news aggregation site that has reasonable high
standards of submissions and comments. Like all aggregation sites it has plenty
of stories that do not interest me directly but there is a lot of good technical
news / startup news there.</p>

<p>Requires a bit more mental filtering but still worth it. Just be aware that it
is quite start-up focused which can cause a bit of an echo chamber effect. A
healthy dose of cynicism (realism?) is useful.</p>

<h2><a href="http://reddit.com">Reddit</a></h2>

<p>Ah, Reddit, the "Front page of the internet" and a hell of a good time-waster.
Beware of this site in that regard.</p>

<p>Reddit has various subforums related to specialised topics. For the Ruby
developer about town the following Reddits may prove useful:</p>

<ul>
<li><a href="http://reddit.com/r/ruby">Ruby</a></li>
<li><a href="http://reddit.com/r/rubyonrails">Ruby on Rails</a></li>
<li><a href="http://reddit.com/r/webdev">Webdev</a></li>
</ul>


<h2><a href="http://ruby5.envylabs.com">Ruby5</a></h2>

<p>Ruby5 is a podcast from the gents at Envy Labs which covers interesting ruby
related things. They are relatively short and to the point (About 5 minutes)</p>

<p>To be honest, I do not listen to the podcast that often but they list each tech
they talk about on the page for that episode which is what I usually have a look
at.</p>

<h2><a href="http://rubyshow.com">RubyShow</a></h2>

<p>In the same manner as Ruby5 above this podcast talks about interesting things
going on in the ruby world. The podcasts from Rubyshow are a lot longer than
ruby5.</p>

<p>Again like Ruby5 I mainly use this site for the list of technologies they have
in the transcript rather than listening to the podcast itself. (Aren't I an
old fashioned duffer...)</p>

<h2><a href="http://webpulp.tv">Webpulp</a></h2>

<p>While I am mainly a ruby dev I am also resposible for other aspects such as
server administration etc. (Not my main job but hey).</p>

<p>Webpulp.tv is basically a series of interviews with employees of quite famous
tech related companies.</p>

<p>The interviews usually focus on the technology used by the company, challenges
they have faced and how they got around them etc.</p>

<p>It is exceedingly useful to see what others are using in their stacks and a good
way to learn about new and interesting software / techniques that might be
useful for you.</p>

<p>Unfortunately webpulp does not update very often but what the hey.</p>

<h2>Company blogs</h2>

<p>As well as the above I have blogs by various ruby related companes on an RSS
feed. for example:</p>

<ul>
<li><a href="http://37signals.com/svn">37Signals</a></li>
<li><a href="http://www.engineyard.com/blog">EngineYard</a></li>
<li><a href="http://robots.thoughtbot.com/">Thoughtbot</a></li>
</ul>


<p>You should find companies doing stuff that interest you and sign up to their
blogs</p>

<h2><a href="http://rubular.com/">Rubular</a></h2>

<p>This is a handy little site which lets you write and test regular expressions
as you write them. It is my go-to site when I need to use regexes (which is not
that common, hence why it is such a useful site)</p>

<h2>Other things</h2>

<p>If you have read this far then I thank you for your attention and would like to
use it to remind you of one thing.</p>

<p>Everything above is optional. What you should be doing anyway is being signed up
to the security mailing lists of all the major components in your stack.</p>

<p>For example if you you Ruby on Rails with PostgreSQL and Redis datastores and a
Varnish cache running on CentOS then you should be signed up to the security
mailing lists of all of these.</p>

<h2>A Final Warning / Bit of Encouragement</h2>

<p>I have listed a reasonable number of resources above. This list is no-where near
exhaustive and you should be building up your own list of go-to resources. As
well as this you need to beware of something I call "Learner's Paralysis".</p>

<p>Following all of the above sites (plus ones you find yourself) can take up a
significant chunk of your time if you let it.</p>

<p>Do not let it take up so much that you end up reading / learning a lot more than
doing. This is a problem I suffer from, I find learning about these things so
interesting (at a superficial level) that I don't actually get round to <em>doing</em>
anything. (Work on side-projects, think about that bootstrapped business
I want to to start etc.)</p>

<p>Get out there and put the stuff to use rather than just thinking "Hey, I learned
something" and leaving it at that.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Textile filtering with RedCloth]]></title>
    <link href="http://rurounijones.github.com/blog/2009/10/24/textile-filtering-with-redcloth/"/>
    <updated>2009-10-24T18:00:00+09:00</updated>
    <id>http://rurounijones.github.com/blog/2009/10/24/textile-filtering-with-redcloth</id>
    <content type="html"><![CDATA[<p>I wanted to use RedCloth to let users of my rails app make textile formatted
posts but I wanted to restrict the input they were allowed to use. How to do
this? I thought it would be simple.</p>

<p><strong>Warning: This article was imported from an old site and is therefore itself
rather old. It may not still be accurate for current versions of RedCloth.</strong></p>

<!--more-->


<p>Textile has a +filter_html+ option which I thought would do the trick but that
only filters what HTML RedCloth allows users to enter. It doesn’t filter the
HTML created by Redcloth itself when a user uses textile tags.</p>

<p>So how to filter the textile tags?</p>

<p>First, assuming you are using Rails 2.3 or later create the following file.
For other frameworks please use the recommended method for adding start-up
code to that framework.</p>

<p><code>
config/initializers/redcloth_filter.rb
</code></p>

<p>This file will be run during the rails initialization and will contain the code
we want to override (monkey-patch). Now paste the following code into the file.</p>

<p>``` ruby config/initializers/redcloth_filter.rb
module RedCloth::Formatters::HTML
  include RedCloth::Formatters::Base</p>

<p>  ALLOWED_TAGS = {</p>

<pre><code>  'a' =&gt; ['href', 'title'],
  'br' =&gt; [],
  'i' =&gt; nil,
  'u' =&gt; nil,
  'b' =&gt; nil,
  'pre' =&gt; nil,
  'kbd' =&gt; nil,
  'code' =&gt; ['lang'],
  'cite' =&gt; nil,
  'strong' =&gt; nil,
  'em' =&gt; nil,
  'ins' =&gt; nil,
  'sup' =&gt; nil,
  'sub' =&gt; nil,
  'del' =&gt; nil,
  'table' =&gt; nil,
  'tr' =&gt; nil,
  'td' =&gt; ['colspan', 'rowspan'],
  'th' =&gt; nil,
  'ol' =&gt; ['start'],
  'ul' =&gt; nil,
  'li' =&gt; nil,
  'p' =&gt; nil,
  'h3' =&gt; nil,
  'h4' =&gt; nil,
  'h5' =&gt; nil,
  'h6' =&gt; nil,
  'blockquote' =&gt; ['cite'],
</code></pre>

<p>  }</p>

<p>  def after_transform(text)</p>

<pre><code>text.chomp!
clean_html(text, ALLOWED_TAGS)
</code></pre>

<p>  end  <br/>
end
```</p>

<p>ALLOWED_TAGS is a hash of tags that you want to allow. You can take the
<a href="http://redcloth.rubyforge.org/classes/RedCloth/Formatters/HTML.html">BASIC_TAGS</a>
to use as a base and strip tags you don’t want to allow from the hash and add
other ones if you want to.</p>

<p>So we have defined the tags that we want to allow. Now we need to actually do
some stripping. This is where the after_transform method comes in. This is
called by RedCloth as standard after initial modification. So what we can do is
override the method and tell RedCloth to clean_html again with the HTML string
it has just created. To give you a list of steps.</p>

<ul>
<li>RedCloth is configured with +filter_html+ enabled</li>
<li>User enters string (Textile and HTML)</li>
<li>RedCloth strips HTML tags from the string according to the BASIC_TAGS using
clean_html method</li>
<li>RedCloth converts the textile tags in the string to HTML</li>
</ul>


<p>At this point the HTML’ised string is usually returned; however we do some
overriding so that:</p>

<ul>
<li>RedCloth strips HTML tags from the above generated HTML string according to
our ALLOWED_TAGS using the clean_html method</li>
<li>RedCloth returns the twice filtered HTML string.</li>
</ul>


<p>Thinking about it you don’t even need +filter_html+ since it will all be
filtered the second time around explicitly by our code. However I feel a little
more secure by stripping all the user generated HTML cruft first using
+filter_html+ before stripping our textile generated HTML ourselves.</p>

<p>Enjoy</p>
]]></content>
  </entry>
  
</feed>
